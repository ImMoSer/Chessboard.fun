ИСТОЧНИК 1:

Золотой стандарт настройки среды разработки Vue.js и TypeScript
Этот отчет представляет собой исчерпывающее руководство по настройке профессиональной среды разработки для веб-приложений на Vue.js и TypeScript с использованием Visual Studio Code. Цель — выйти за рамки базовых конфигураций и внедрить «золотой стандарт», отражающий строгие практики, принятые в ведущих командах инженеров-программистов. Руководство охватывает все аспекты: от инициализации проекта и управления зависимостями до детальной настройки инструментов статического анализа, форматирования кода, интеграции с IDE и автоматизации проверок качества на уровне всего проекта.

Раздел 1: Профессиональный фундамент: создание проекта и управление зависимостями
Создание надежной основы является первым и самым важным шагом в построении профессиональной среды разработки. Этот раздел посвящен не просто установке пакетов, а глубокому анализу современной экосистемы фронтенд-инструментов, объясняя специфическую роль каждого компонента. Такое понимание критически важно для будущей отладки и кастомизации проекта.

1.1 Инициализация современного Vue-проекта с помощью Vite
Процесс начинается с создания нового проекта с использованием отраслевого стандарта create-vue, который построен на базе Vite. Это гарантирует, что фундамент проекта будет современным и производительным с самого начала. Для инициализации проекта используется команда    

pnpm create vue (или аналогичные для npm/yarn), где необходимо выбрать опции Vue и TypeScript для генерации начальной структуры.

1.2 Демистификация экосистемы инструментов: установка зависимостей
На этом этапе устанавливается полный набор необходимых devDependencies. Вместо простого перечисления команд, пакеты сгруппированы по функциональному назначению (основные, ESLint, Prettier, автоматизация), чтобы прояснить их роль в проекте.

Основные инструменты: typescript, vue-tsc (для проверки типов в файлах .vue из командной строки), @types/node (для типов Node.js).   

Экосистема ESLint: eslint (ядро линтера), typescript-eslint (современный парсер и плагин для TypeScript), eslint-plugin-vue (для специфичных правил файлов .vue) и ключевой пакет @vue/eslint-config-typescript, предоставляющий официальные, предварительно настроенные наборы правил от команды Vue.   

Экосистема Prettier: prettier (форматтер кода), eslint-config-prettier (для отключения стилистических правил ESLint).   

Инструменты автоматизации: husky и lint-staged для настройки pre-commit хуков.   

Длинный список зависимостей с похожими названиями (eslint-plugin-*, eslint-config-*, @typescript-eslint/*) может показаться избыточным, но на самом деле он отражает фундаментальный сдвиг в разработке фронтенда к высокоспециализированной, модульной экосистеме. ESLint является ядром, но сам по себе он не понимает синтаксис TypeScript или структуру однофайловых компонентов (.vue). Сложность современных фреймворков требует такой модульности. Для корректной работы необходимы:

Парсер (@typescript-eslint/parser, vue-eslint-parser): читает и разбирает синтаксис кода.

Плагин (@typescript-eslint/eslint-plugin, eslint-plugin-vue): предоставляет правила, специфичные для этого синтаксиса.

Конфигурация (@vue/eslint-config-typescript): объединяет эти правила в логичные, готовые к использованию наборы.

Понимание этой архитектуры — ключ к эффективному устранению ошибок линтинга и настройке правил. Профессиональный разработчик должен четко различать эти компоненты.

Таблица 1: Основные зависимости для линтинга и форматирования
Название пакета	Роль в экосистеме	Команда для установки
eslint	Ядро статического анализатора кода (линтера).	pnpm add -D eslint
typescript-eslint	Набор инструментов (парсер и плагин) для анализа TypeScript-кода.	pnpm add -D typescript-eslint
eslint-plugin-vue	Плагин с правилами, специфичными для Vue.js и файлов .vue.	pnpm add -D eslint-plugin-vue
@vue/eslint-config-typescript	Официальная конфигурация от команды Vue, интегрирующая TypeScript и Vue.	pnpm add -D @vue/eslint-config-typescript
prettier	Opinionated-форматтер, отвечающий исключительно за стиль кода.	pnpm add -D --save-exact prettier
eslint-config-prettier	Отключает правила ESLint, которые конфликтуют с Prettier.	pnpm add -D eslint-config-prettier
husky	Инструмент для управления Git-хуками.	pnpm add -D husky
lint-staged	Инструмент для запуска команд над файлами, добавленными в коммит.	pnpm add -D lint-staged

Экспортировать в Таблицы
Раздел 2: Золотой стандарт качества кода: освоение eslint.config.ts
Это центральная часть руководства, посвященная настройке ESLint с использованием современного «плоского» формата конфигурации. Этот подход является более явным, композитным и мощным по сравнению с устаревшим форматом .eslintrc. Приоритет отдается использованию официальных рекомендаций команды Vue.js для создания настоящего «золотого стандарта».

2.1 Революция плоской конфигурации: почему eslint.config.ts?
С выходом ESLint v9 формат плоской конфигурации (eslint.config.js или .ts) стал стандартом по умолчанию, предлагая значительные преимущества. Он обеспечивает полную поддержку ESM, более ясную структуру (это просто JavaScript-модуль, экспортирующий массив объектов) и точный контроль над тем, какие правила применяются к каким файлам, с помощью    

files glob-паттернов.   

2.2 Построение конфигурации с @vue/eslint-config-typescript
Профессиональный подход заключается в использовании пакета @vue/eslint-config-typescript. Он предоставляет вспомогательную функцию defineConfigWithVueTs, которая абстрагирует сложную настройку парсеров для TypeScript и Vue, значительно упрощая конфигурацию.   

2.3 Выбор профессиональных наборов правил
eslint-plugin-vue предлагает несколько наборов правил: flat/essential, flat/strongly-recommended и flat/recommended. Для профессиональной среды рекомендуется использовать    

plugin:vue/vue3-strongly-recommended или plugin:vue/vue3-recommended. Это соответствует требованию избегать «каждой мелкой ошибки» и сосредоточиться на правилах, которые значительно улучшают читаемость кода, предотвращают ошибки и обеспечивают соблюдение лучших практик сообщества. Этот набор комбинируется с рекомендованными правилами для TypeScript от    

typescript-eslint.   

2.4 Достижение гармонии: интеграция eslint-config-prettier
Ключевым моментом является интеграция eslint-config-prettier. Этот пакет добавляется в конец массива конфигурации. Его задача — отключить все стилистические правила ESLint (из Vue, TypeScript или базового набора), которые могут конфликтовать с форматированием Prettier.   

Существует фундаментальный конфликт между ESLint и Prettier, поскольку ESLint исторически включал правила, касающиеся стиля кода (например, использование кавычек или точек с запятой), в то время как Prettier является специализированным форматтером, который занимается исключительно стилем. Когда оба инструмента пытаются управлять стилем, они вступают в конфликт, что может привести к бесконечному циклу исправлений. eslint-config-prettier решает эту проблему, программно отключая все стилистические правила ESLint.

Таким образом, достигается четкое разделение ответственности: ESLint отвечает за качество кода (потенциальные ошибки, неиспользуемые переменные, логические проблемы), а Prettier — за стиль (форматирование, отступы, переносы строк). Эта философия упрощает настройку и позволяет каждому инструменту выполнять свою основную функцию.

Ниже представлен полный, аннотированный пример файла eslint.config.ts, который реализует этот золотой стандарт.

TypeScript

// eslint.config.ts
import eslintPluginVue from 'eslint-plugin-vue';
import { defineConfigWithVueTs, vueTsConfigs } from '@vue/eslint-config-typescript';
import eslintConfigPrettier from 'eslint-config-prettier';
import globals from 'globals';
import tseslint from 'typescript-eslint';
import js from '@eslint/js';

export default tseslint.config(
  js.configs.recommended,
 ...tseslint.configs.recommended,
 ...eslintPluginVue.configs['flat/vue3-strongly-recommended'],
  {
    languageOptions: {
      globals: {
       ...globals.browser,
       ...globals.node,
      },
    },
  },
  {
    // Глобальное отключение правил, которые неактуальны в профессиональной разработке
    rules: {
      'no-console': process.env.NODE_ENV === 'production'? 'warn' : 'off',
      'no-debugger': process.env.NODE_ENV === 'production'? 'warn' : 'off',
    },
  },
  // Эта конфигурация должна быть последней в массиве, чтобы отключать конфликтующие правила
  eslintConfigPrettier
);
Раздел 3: Укрепление кодовой базы: продвинутая конфигурация TypeScript (tsconfig.json)
Правильно настроенный tsconfig.json является обязательным условием для профессионального Vue-проекта. Он обеспечивает надежную проверку типов и совместимость с современными инструментами сборки, такими как Vite.

3.1 Роль tsconfig.json в проекте Vue/Vite
tsconfig.json — это панель управления для компилятора TypeScript (tsc). В проекте на Vite, в то время как esbuild отвечает за быструю транспиляцию во время разработки, утилита vue-tsc использует настройки из этого файла для полной проверки типов во всем проекте.   

3.2 Расширение профессиональной базовой конфигурации: @vue/tsconfig
Аналогично настройке ESLint, конфигурация TypeScript не создается с нуля. Вместо этого она расширяет официальный пакет @vue/tsconfig/tsconfig.dom.json (ранее tsconfig.web.json), который предоставляет проверенный набор настроек по умолчанию для Vue-приложений, работающих в браузере. Это гарантирует наследование лучших практик непосредственно от команды Vue.   

3.3 Аннотированные compilerOptions: глубокое погружение в критические настройки
Этот раздел подробно разбирает наиболее важные опции compilerOptions.

strict: true: Настоятельно рекомендуется включать эту опцию. Она активирует набор строгих проверок типов (таких как noImplicitAny и noImplicitThis), которые необходимы для отлова ошибок и использования всей мощи TypeScript, особенно при работе с Options API в Vue.   

Совместимость с Vite (isolatedModules и verbatimModuleSyntax): Опция isolatedModules: true или более новая verbatimModuleSyntax: true является обязательной. Транспилятор Vite, esbuild, обрабатывает файлы изолированно, что обеспечивает высокую скорость, но не позволяет разрешать типы между файлами. Эти флаги заставляют использовать паттерны кодирования, совместимые с этим ограничением.   

Разрешение модулей (moduleResolution: "Bundler"): Современное значение "Bundler" лучше отражает, как сборщики, такие как Vite, разрешают импорт модулей.   

Псевдонимы путей (paths): Настройка псевдонима @/* для соответствия конфигурации Vite позволяет использовать чистые, абсолютные импорты, которые понимает TypeScript.   

Таблица 2: Ключевые опции compilerOptions для Vue 3 + Vite
Опция	Рекомендуемое значение	Обоснование / Влияние на проект
strict	true	
Включает все строгие проверки типов, что критически важно для надежности кода и корректной работы с this в Options API.   

verbatimModuleSyntax	true	
Обеспечивает совместимость с транспиляторами, работающими с отдельными файлами (например, esbuild в Vite), и является более строгим аналогом isolatedModules.   

moduleResolution	"Bundler"	
Указывает TypeScript использовать стратегию разрешения модулей, аналогичную современным сборщикам, таким как Vite.   

target	"ESNext"	Позволяет использовать самые современные возможности JavaScript, оставляя транспиляцию на усмотрение сборщика.
lib	``	Включает стандартные библиотеки типов для современного JavaScript и окружения браузера (DOM API).
paths	{ "@/*": ["./src/*"] }	
Настраивает псевдонимы путей, чтобы TypeScript мог разрешать импорты, настроенные в Vite.   

Ниже представлен полный, аннотированный пример файла tsconfig.json.

JSON

{
  "extends": "@vue/tsconfig/tsconfig.dom.json",
  "include": ["env.d.ts", "src/**/*", "src/**/*.vue"],
  "exclude": ["src/**/__tests__/*"],
  "compilerOptions": {
    "composite": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    // Строгость и совместимость
    "strict": true,
    "verbatimModuleSyntax": true,
    "moduleResolution": "Bundler",
    // Среда выполнения
    "target": "ESNext",
    "module": "ESNext",
    "lib":,
    // Качество кода
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  }
}
Раздел 4: Бескомпромиссная последовательность: философия Prettier (.prettierrc.json)
Этот раздел посвящен Prettier, opinionated-форматтеру кода. Его цель — устранить все споры о стиле кода, определив единый, автоматически применяемый стандарт.

4.1 Философия «Opinionated Formatter»
Сила Prettier заключается в его ограниченной конфигурации. Будучи «самоуверенным» (opinionated), он навязывает единый стиль всему коду, освобождая разработчиков от необходимости думать о форматировании.   

4.2 Определение общекомандного стиля в .prettierrc.json
Файл .prettierrc.json определяет правила форматирования для всего проекта. Prettier ищет этот файл, двигаясь вверх по дереву каталогов от форматируемого файла, что обеспечивает применение специфичных для проекта стилей.   

JSON

{
  "semi": false,
  "singleQuote": true,
  "trailingComma": "es5",
  "tabWidth": 2,
  "printWidth": 100,
  "vueIndentScriptAndStyle": true
}
"semi": false: Убирает точки с запятой в конце строк.

"singleQuote": true: Предпочитает одинарные кавычки.

"trailingComma": "es5": Добавляет висячие запятые там, где это возможно в ES5, что упрощает Git-диффы.   

"printWidth": 100: Устанавливает максимальную длину строки.

"vueIndentScriptAndStyle": true: Обеспечивает корректные отступы внутри тегов <script> и <style> в .vue файлах.

4.3 Игнорирование того, что не следует трогать: .prettierignore
Файл .prettierignore работает аналогично .gitignore. Он необходим, чтобы предотвратить форматирование сгенерированных файлов, артефактов сборки (dist) или папок с зависимостями (node_modules).   

# Ignore artifacts:
/dist
/coverage
/node_modules

# Ignore generated files:
*.d.ts
Раздел 5: Кабина пилота: бесшовная интеграция с VS Code
Этот раздел посвящен настройке редактора, чтобы сделать проверку качества и форматирование автоматической и незаметной частью процесса разработки.

5.1 Основные расширения: двигатели интеграции
Для полной интеграции необходимо установить три ключевых расширения:

ESLint (от Microsoft, dbaeumer.vscode-eslint).   

Prettier - Code formatter (esbenp.prettier-vscode).   

Vue - Official (Vue.volar), которое обеспечивает полную языковую поддержку Vue и должно использоваться вместо устаревшего Vetur.   

5.2 Окончательная конфигурация .vscode/settings.json
Файл settings.json, размещенный в папке .vscode в корне проекта, гарантирует, что настройки будут одинаковыми для всех разработчиков в команде.   

5.3 Демистификация formatOnSave и codeActionsOnSave
editor.formatOnSave — это простой флаг, который запускает форматтер по умолчанию. editor.codeActionsOnSave — более мощный механизм, который может выполнять несколько «действий с исходным кодом», включая исправления линтера, в определенном порядке.   

5.4 Достижение автоматического исправления при сохранении с source.fixAll.eslint
Итоговая конфигурация использует оба механизма. При сохранении файла VS Code сначала выполняет форматирование с помощью Prettier, а затем применяет все автоматически исправляемые правила ESLint.

Эта последовательность действий работает без конфликтов благодаря ранее выполненной настройке. Поскольку eslint-config-prettier уже отключил все стилистические правила ESLint, два инструмента оперируют разными аспектами кода: Prettier (formatOnSave) отвечает за стиль, а ESLint (codeActionsOnSave) — за качество. Это предотвращает ситуацию, когда один инструмент отменяет изменения другого. Правильно настроенный рабочий процесс «при сохранении» является последним звеном в цепи, которая начинается с грамотной установки зависимостей и философского решения разделить форматирование и линтинг.

JSON

{
  // Устанавливает Prettier как форматтер по умолчанию
  "editor.defaultFormatter": "esbenp.prettier-vscode",

  // Включает форматирование при сохранении файла
  "editor.formatOnSave": true,

  // Включает автоматическое исправление ошибок ESLint при сохранении
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "explicit"
  },

  // Указывает ESLint проверять эти типы файлов
  "eslint.validate": [
    "javascript",
    "typescript",
    "vue"
  ],

  // Отключает встроенный валидатор шаблонов Vetur, чтобы избежать конфликтов с ESLint
  "vetur.validation.template": false
}
Раздел 6: За пределами редактора: общепроектное принуждение и автоматизация
Этот заключительный раздел отвечает на критически важное требование о проверке всех модулей проекта, а не только открытых файлов. Это отличительная черта профессиональной команды: качество обеспечивается на уровне проекта, а не зависит от дисциплины отдельного разработчика или настроек его редактора.

6.1 Скрипты package.json: ручное управление
Добавление скриптов lint и format в package.json позволяет любому разработчику (или CI/CD-пайплайну) вручную запустить ESLint и Prettier для всей кодовой базы одной командой.   

JSON

"scripts": {
  "dev": "vite",
  "build": "vue-tsc && vite build",
  "preview": "vite preview",
  "lint": "eslint. --ext.vue,.js,.ts,.cjs,.mjs --fix --ignore-path.gitignore",
  "format": "prettier. --write"
}
6.2 Абсолютная гарантия: pre-commit хуки
Git-хуки — это автоматические проверки, которые выполняются перед определенными действиями Git, такими как создание коммита. Это главный барьер качества проекта.

6.3 Пошаговое руководство: настройка Husky и lint-staged
Это подробное пошаговое руководство по настройке.

Установка husky и lint-staged в качестве dev-зависимостей.

Инициализация Husky: npx husky init. Эта команда создает каталог .husky/ и добавляет скрипт prepare в package.json.   

Создание pre-commit хука: Создается файл .husky/pre-commit, в который добавляется команда npx lint-staged.   

Настройка lint-staged: В package.json добавляется конфигурация lint-staged. Она указывает lint-staged запускать eslint --fix только для тех файлов, которые добавлены в коммит (staged).

Наивный подход — запускать npm run lint перед каждым коммитом. Однако в большом проекте это было бы чрезвычайно медленно и отбило бы у разработчиков желание делать частые коммиты. lint-staged решает эту проблему производительности. Он интеллектуально запускает линтеры только для тех файлов, которые были изменены и являются частью текущего коммита (git diff --cached). Профессиональный подход заключается не просто в принуждении, а в    

эффективном принуждении. lint-staged воплощает философию «проверяй то, что трогаешь». Он обеспечивает полную безопасность без ущерба для производительности, создавая дружелюбный к разработчику рабочий процесс, который поощряет небольшие, частые и качественные коммиты.

JSON

// package.json
{
  //...
  "lint-staged": {
    "*.{vue,js,ts,cjs,mjs}": "eslint --fix"
  }
}
После выполнения этих шагов любая попытка закоммитить код, содержащий автоматически исправляемые ошибки линтинга, приведет к тому, что эти ошибки будут исправлены и добавлены в коммит. Если ошибки не могут быть исправлены автоматически, коммит будет прерван, что предотвратит попадание некачественного кода в репозиторий.   

Выводы
Создание профессиональной среды разработки — это не просто установка инструментов, а построение целостной системы, в которой каждый компонент выполняет свою роль и гармонично взаимодействует с другими. Представленный «золотой стандарт» конфигурации для Vue.js, TypeScript, ESLint и Prettier решает эту задачу, основываясь на следующих ключевых принципах:

Модульность и специализация: Использование отдельных инструментов для каждой задачи (Vite для сборки, TypeScript для типов, ESLint для качества кода, Prettier для стиля) позволяет достичь максимальной эффективности.

Разделение ответственности: Четкое разграничение между анализом качества кода (ESLint) и форматированием (Prettier) устраняет конфликты и упрощает конфигурацию.

Автоматизация и последовательность: Интеграция с VS Code обеспечивает мгновенную обратную связь, а pre-commit хуки с Husky и lint-staged гарантируют, что ни одна строка некачественного кода не попадет в репозиторий. Этот двухуровневый подход обеспечивает как удобство разработчика, так и строгий контроль качества на уровне проекта.

Опора на официальные стандарты: Расширение конфигураций, предоставляемых командами Vue.js и TypeScript (@vue/eslint-config-typescript, @vue/tsconfig), гарантирует, что проект следует лучшим практикам и будет легко поддерживаться в будущем.

Внедрение этой системы позволяет разработчикам сосредоточиться на решении бизнес-задач, будучи уверенными в том, что качество, читаемость и последовательность их кода поддерживаются автоматически на самом высоком уровне.




ИСТОЧНИК 2:
Настройка среды разработки Vue 3 + TypeScript + Vite

1. Расширения и зависимости: Установите в VS Code расширения ESLint и Vue (Volar) – официальный плагин для Vue 3
vueschool.io
. Затем добавьте в проект необходимые пакеты:

npm install -D eslint eslint-plugin-vue @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint-config-prettier prettier


Это подключит сам ESLint, Vue‑плагин, TypeScript-парсер/плагин и Prettier.

2. Настройки VS Code (.vscode/settings.json): Включите автоисправление и валидацию в VS Code. Например:

{
  "eslint.validate": ["vue", "javascript", "typescript"],
  "eslint.format.enable": true,
  "eslint.lintTask.enable": true,
  "eslint.workingDirectories": [{ "mode": "auto" }],
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": { "source.fixAll.eslint": true },
  "[vue]": { "editor.defaultFormatter": "esbenp.prettier-vscode" },
  "[javascript]": { "editor.defaultFormatter": "esbenp.prettier-vscode" }
}


"eslint.lintTask.enable": true позволяет выполнять линтер по всему проекту (вместе с задачей lint)
saisandeepvaddi.com
.

"eslint.validate": ["vue", "javascript", "typescript"] говорит, какие файлы проверять ESLint
jdmendozar.medium.com
.

"editor.formatOnSave": true + editor.codeActionsOnSave с "source.fixAll.eslint": true обеспечивают автоправку ошибок и форматирование при сохранении
vueschool.io
jdmendozar.medium.com
.

(Если используете старый Vetur, выключите его валидацию шаблонов: "vetur.validation.template": false
vueschool.io
, чтобы ESLint обрабатывал <template> Vue.)

3. ESLint-конфигурация (eslint.config.ts или .eslintrc.js): В профессиональных проектах в ESLint обычно подключают рекомендуемые правила и правила Vue, а конфликты с Prettier подавляют последним. Например (flat-конфигурация ESLint 9+):

// eslint.config.ts
import eslint from '@eslint/js';
import pluginVue from 'eslint-plugin-vue';
import tsEslint from 'typescript-eslint';
import eslintConfigPrettier from 'eslint-config-prettier';

export default tsEslint.config(
  // 1) базовые правила ESLint
  eslint.configs.recommended,
  // 2) правила TS-ESLint
  ...tsEslint.configs.recommended,
  // 3) Vue3 правила (содержат базовые + strongly-recommended + recommended)
  ...pluginVue.configs['flat/recommended'],
  // 4) специфичная настройка для .vue: используем TS-парсер внутри <script>
  {
    plugins: { '@typescript-eslint': tsEslint.plugin },
    languageOptions: {
      parserOptions: {
        parser: tsEslint.parser,
        project: './tsconfig.json',
        extraFileExtensions: ['.vue'],
        sourceType: 'module'
      }
    }
  },
  // 5) отключаем правила, конфликтующие с Prettier
  eslintConfigPrettier
);


Здесь мы комбинируем eslint:recommended, правила TypeScript и Vue 3 (аналог plugin:vue/vue3-recommended), а затем добавляем eslint-config-prettier, чтобы подавить правила форматирования, которые перекрываются с Prettier
stackoverflow.com
vueschool.io
. Также в секции languageOptions.parserOptions указываем parser: '@typescript-eslint/parser' и путь к tsconfig.json для поддержки TypeScript и Vue SFC
stackoverflow.com
.

В правилах можно отключать или ослаблять несущественные проверки, например:

rules: {
  'vue/multi-word-component-names': 'off',
  // 'vue/require-default-prop': 'off',  // чтобы не требовать значение по умолчанию для пропсов:contentReference[oaicite:9]{index=9}
  // любые другие правила по вкусу...
}


(Например, часто отключают vue/require-default-prop
vueschool.io
, vue/no-v-html или no-console и др., чтобы избежать «шумных» предупреждений.)

4. tsconfig.json: Убедитесь, что TypeScript видит файлы .vue. Обычно делают так:

{
  "extends": "@vue/tsconfig/tsconfig.dom.json",
  "include": ["src/**/*", "src/**/*.vue"],
  "compilerOptions": {
    "strict": true,
    "jsx": "preserve",
    "useDefineForClassFields": true
    // ...остальные опции (target, module, lib, etc.) подстроятся под Vite/ESNext
  }
}


Важно указать include с *.vue, чтобы TypeScript-парсер ESLint мог обрабатывать компоненты Vue
stackoverflow.com
. Часто используют базовые конфиги @vue/tsconfig или те, что генерирует create-vue.

5. Форматирование и Prettier (.prettierrc.json): Для единообразного форматирования подключите Prettier. Например, файл .prettierrc.json:

{
  "semi": false,
  "singleQuote": true,
  "tabWidth": 4,
  "trailingComma": "es5"
}


(Это пример из официальной документации Prettier
prettier.io
.) Форматирование обычно запускается отдельным инструментом – в VS Code он будет применяться на сохранении (с учётом editor.defaultFormatter выше). Чтобы правила Prettier не конфликтовали с ESLint, важно подключить eslint-config-prettier (как показано в конфиге) или плагин eslint-plugin-prettier. Тогда сломанные правила Prettier будут подавлены и применяться только в качестве форматирования
vueschool.io
jdmendozar.medium.com
.

6. Запуск линтера и автоформатирование: Можно добавить в package.json скрипты, например:

"scripts": {
  "lint": "eslint --ext .js,.ts,.vue src --fix",
  "format": "prettier --write ."
}


И в VSCode настроить задачу (.vscode/tasks.json), чтобы npm run lint или yarn lint проверял весь проект
saisandeepvaddi.com
. При сохранении VSCode автоматически будет вызывать ESLint для открытого файла и исправлять ошибки, а Prettier – форматировать код.

Итог (“золотой стандарт”): в профессиональных проектах VSCode настроен на автоматическую проверку и исправление кода при сохранении, а eslint.config.ts (или .eslintrc.js) объединяет рекомендуемые правила ESLint, Vue и (опционально) TypeScript, с подавлением конфликтов с Prettier. Приведённые примеры и настройки основаны на общепринятых практиках
vueschool.io
stackoverflow.com
. Следуя им, вы получите «тихий» фоновой линтер, не отвлекающий на мелочи, и единообразный стиль кода в проекте.


ИСТОЧНИК 3:
Настройка профессиональной среды разработки Vue.js + TypeScript + ESLint в VSCode
Основываясь на проведенном исследовании современных практик разработки, представляю комплексное руководство по настройке среды разработки, которая обеспечивает фоновое линтирование всех файлов проекта и следует стандартам профессиональной разработки.

Ключевые особенности настройки
Фоновое линтирование всех файлов: Конфигурация обеспечивает проверку всех файлов проекта в фоновом режиме, а не только открытых в редакторе.

Оптимизированные правила: ESLint настроен с балансом между строгостью и практичностью - показывает важные ошибки, но не отвлекает на мелочи.

Современный Flat Config: Используется новый формат конфигурации ESLint 9.x, который станет стандартом.

Архитектура настройки
1. Зависимости проекта
Установка современного стека с поддержкой ESLint 9 и Vue 3:

bash
npm install -D eslint @eslint/js typescript typescript-eslint
npm install -D eslint-plugin-vue @vue/eslint-config-typescript  
npm install -D prettier @vue/eslint-config-prettier
npm install -D vue-tsc @vue/tsconfig
2. ESLint конфигурация (eslint.config.ts)
Современная конфигурация с Flat Config формата, оптимизированная для профессиональной разработки:

typescript
import eslint from '@eslint/js'
import typescript from 'typescript-eslint'
import pluginVue from 'eslint-plugin-vue'
import skipFormatting from '@vue/eslint-config-prettier/skip-formatting'
import { defineConfigWithVueTs, vueTsConfigs } from '@vue/eslint-config-typescript'

export default defineConfigWithVueTs(
  {
    name: 'app/files-to-ignore',
    ignores: ['**/dist/**', '**/coverage/**', '**/node_modules/**']
  },
  
  {
    name: 'app/files-to-lint',
    files: ['**/*.{ts,mts,tsx,vue,js,jsx}'],
    languageOptions: {
      ecmaVersion: 2022,
      sourceType: 'module',
    },
  },

  eslint.configs.recommended,
  ...pluginVue.configs['flat/recommended'],
  ...vueTsConfigs.recommended,

  {
    name: 'app/custom-rules',
    rules: {
      // Сбалансированная строгость TypeScript
      '@typescript-eslint/no-unused-vars': ['warn', { 
        argsIgnorePattern: '^_',
        varsIgnorePattern: '^_'
      }],
      '@typescript-eslint/explicit-function-return-type': 'off',
      '@typescript-eslint/no-explicit-any': 'warn',
      
      // Оптимизированные Vue правила
      'vue/multi-word-component-names': 'off',
      'vue/require-default-prop': 'off',
      'vue/max-attributes-per-line': ['error', {
        singleline: { max: 3 },
        multiline: { max: 1 }
      }],
      
      // Практичные общие правила
      'no-console': process.env.NODE_ENV === 'production' ? 'warn' : 'off',
      'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'off',
    },
  },

  skipFormatting
)
3. TypeScript конфигурация (tsconfig.json)
Профессиональная настройка с современными стандартами безопасности типов:

json
{
  "extends": "@vue/tsconfig/tsconfig.web.json",
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "moduleResolution": "bundler",
    
    // Строгость для профессиональной разработки
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noUncheckedIndexedAccess": true,
    
    // Производительность
    "incremental": true,
    "skipLibCheck": true,
    "isolatedModules": true,
    
    // Разрешение модулей
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    },
    "types": ["vite/client"],
    "resolveJsonModule": true,
    
    // Vue поддержка
    "jsx": "preserve",
    "jsxImportSource": "vue"
  },
  "include": ["src/**/*.ts", "src/**/*.tsx", "src/**/*.vue"],
  "exclude": ["node_modules", "dist", "coverage"]
}
4. Prettier конфигурация (.prettierrc.json)
Современные стандарты форматирования:

json
{
  "semi": false,
  "singleQuote": true,
  "trailingComma": "es5",
  "tabWidth": 2,
  "printWidth": 100,
  "endOfLine": "lf",
  "arrowParens": "avoid",
  "htmlWhitespaceSensitivity": "css",
  "vueIndentScriptAndStyle": false
}
5. VSCode настройки (.vscode/settings.json)
Критически важная конфигурация для фонового линтирования всех файлов:

json
{
  "editor.formatOnSave": false,
  "editor.codeActionsOnSave": [
    "source.formatDocument",
    "source.fixAll.eslint"
  ],
  
  // Фоновое линтирование ВСЕХ файлов
  "eslint.enable": true,
  "eslint.format.enable": true,
  "eslint.run": "onType",
  "eslint.lintTask.enable": true,
  "eslint.validate": ["javascript", "typescript", "vue"],
  "eslint.probe": ["javascript", "typescript", "vue"],
  "eslint.workingDirectories": [{ "mode": "auto" }],

  // TypeScript интеграция
  "typescript.preferences.includePackageJsonAutoImports": "auto",
  "typescript.suggest.autoImports": true,
  "typescript.updateImportsOnFileMove.enabled": "always",
  
  // Языковые настройки
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.codeActionsOnSave": [
      "source.formatDocument",
      "source.fixAll.eslint"
    ]
  },
  
  "[vue]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode", 
    "editor.codeActionsOnSave": [
      "source.formatDocument",
      "source.fixAll.eslint"
    ]
  },

  // Vue настройки (Volar)
  "vue.server.hybridMode": true,
  "vue.inlayHints.missingProps": true,

  // Исключения для производительности
  "files.exclude": {
    "**/node_modules": true,
    "**/dist": true,
    "**/coverage": true
  },
  
  "files.watcherExclude": {
    "**/node_modules/**": true,
    "**/dist/**": true
  }
}
Обязательные расширения VSCode
Vue - Official (Vue.volar) - замена Vetur для Vue 3

ESLint (dbaeumer.vscode-eslint) - интеграция ESLint

Prettier (esbenp.prettier-vscode) - форматирование кода

TypeScript Importer - автоматический импорт типов

Настройка фонового линтирования
Ключевые настройки для линтирования всех файлов
Для обеспечения проверки всех файлов, а не только открытых:

ESLint run режим: "eslint.run": "onType" - проверка при изменении

Lint Task: "eslint.lintTask.enable": true - фоновые задачи

Working Directories: "eslint.workingDirectories": [{ "mode": "auto" }] - автоопределение

Команды для проверки всего проекта
Добавьте в package.json:

json
{
  "scripts": {
    "lint": "eslint . --fix",
    "lint:check": "eslint .",
    "type-check": "vue-tsc --noEmit"
  }
}
Философия правил ESLint
Профессиональный подход к конфигурации
Правила разделены на три категории согласно практикам промышленной разработки:

Error: Критические ошибки, которые могут сломать приложение

Warn: Потенциальные проблемы и нарушения стиля кода

Off: Правила, конфликтующие с современными практиками

Сбалансированная строгость
TypeScript: Строгие проверки типов без излишнего педантизма

Vue: Оптимизировано для Vue 3 Composition API

Производительность: Правила не замедляют разработку

Решение типичных проблем
ESLint не работает в фоне
Проверка вывода: Ctrl+Shift+P → "ESLint: Show Output Channel"

Перезапуск сервера: Ctrl+Shift+P → "ESLint: Restart ESLint Server"

Права выполнения: Ctrl+Shift+P → "ESLint: Manage Library Execution"

Конфликты форматирования
Убедитесь что skipFormatting импортирован последним в конфигурации и порядок в codeActionsOnSave правильный.

Дополнительные инструменты
Pre-commit хуки
Для команд рекомендуется настроить husky и lint-staged:

bash
npm install -D husky lint-staged
Мониторинг производительности
Используйте встроенные инструменты VSCode для отслеживания производительности ESLint:

ESLint output channel для диагностики

TypeScript server logs для анализа производительности

Данная конфигурация обеспечивает современную, производительную среду разработки, которая автоматически поддерживает качество кода во всем проекте, следуя лучшим практикам профессиональной разработки 2025 года.


